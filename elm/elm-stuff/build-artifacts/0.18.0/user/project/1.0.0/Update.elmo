var _user$project$Update$updateDeleteType = F2(
	function (model, typeDeleted) {
		var _p0 = model.typeList;
		if (_p0.ctor === 'Success') {
			var _p1 = _p0._0;
			var oldTypes = _p1.types;
			var newTypes = A2(
				_elm_lang$core$List$filter,
				function (t) {
					return !_elm_lang$core$Native_Utils.eq(t.id, typeDeleted.id);
				},
				oldTypes);
			var newTypeList = _elm_lang$core$Native_Utils.update(
				_p1,
				{types: newTypes});
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					model,
					{
						typeList: _user$project$Model$Success(newTypeList)
					}),
				{ctor: '[]'});
		} else {
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				model,
				{ctor: '[]'});
		}
	});
var _user$project$Update$updateUpdateType = F2(
	function (model, typeUpdated) {
		var _p2 = model.typeList;
		if (_p2.ctor === 'Success') {
			var _p3 = _p2._0;
			var oldTypes = _p3.types;
			var newTypes = A2(
				_elm_lang$core$List$map,
				function (t) {
					return _elm_lang$core$Native_Utils.eq(t.id, typeUpdated.id) ? _elm_lang$core$Native_Utils.update(
						t,
						{name: typeUpdated.name}) : t;
				},
				oldTypes);
			var newTypeList = _elm_lang$core$Native_Utils.update(
				_p3,
				{types: newTypes});
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					model,
					{
						typeList: _user$project$Model$Success(newTypeList)
					}),
				{ctor: '[]'});
		} else {
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				model,
				{ctor: '[]'});
		}
	});
var _user$project$Update$updateCreateType = F2(
	function (model, newType) {
		var _p4 = model.typeList;
		if (_p4.ctor === 'Success') {
			var _p5 = _p4._0;
			var oldTypes = _p5.types;
			var newTypes = A2(
				_elm_lang$core$List$sortBy,
				function (_) {
					return _.name;
				},
				{ctor: '::', _0: newType, _1: oldTypes});
			var newTypeList = _elm_lang$core$Native_Utils.update(
				_p5,
				{types: newTypes});
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					model,
					{
						typeList: _user$project$Model$Success(newTypeList)
					}),
				{ctor: '[]'});
		} else {
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				model,
				{ctor: '[]'});
		}
	});
var _user$project$Update$saveType = function (model) {
	var _p6 = model.typeId;
	if (_p6.ctor === 'Just') {
		var editedType = {id: _p6._0, name: model.typeName};
		return A2(
			_elm_lang$core$Platform_Cmd_ops['!'],
			_elm_lang$core$Native_Utils.update(
				model,
				{typeName: '', typeId: _elm_lang$core$Maybe$Nothing}),
			{
				ctor: '::',
				_0: _user$project$Commands$updateType(editedType),
				_1: {ctor: '[]'}
			});
	} else {
		var newType = {id: 0, name: model.typeName};
		return A2(
			_elm_lang$core$Platform_Cmd_ops['!'],
			_elm_lang$core$Native_Utils.update(
				model,
				{typeName: ''}),
			{
				ctor: '::',
				_0: _user$project$Commands$createType(newType),
				_1: {ctor: '[]'}
			});
	}
};
var _user$project$Update$urlUpdate = function (model) {
	var _p7 = model.route;
	switch (_p7.ctor) {
		case 'HomeIndexRoute':
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				model,
				{ctor: '[]'});
		case 'TypeIndexRoute':
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				model,
				{
					ctor: '::',
					_0: _user$project$Commands$fetchTypes,
					_1: {ctor: '[]'}
				});
		case 'BrandIndexRoute':
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				model,
				{
					ctor: '::',
					_0: _user$project$Commands$fetchBrands,
					_1: {ctor: '[]'}
				});
		default:
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				model,
				{ctor: '[]'});
	}
};
var _user$project$Update$update = F2(
	function (msg, model) {
		var _p8 = msg;
		switch (_p8.ctor) {
			case 'FetchType':
				if (_p8._0.ctor === 'Ok') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								typeList: _user$project$Model$Success(_p8._0._0)
							}),
						{ctor: '[]'});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								typeList: _user$project$Model$Failure('Something went wrong...')
							}),
						{ctor: '[]'});
				}
			case 'CreateType':
				if (_p8._0.ctor === 'Ok') {
					return A2(_user$project$Update$updateCreateType, model, _p8._0._0);
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				}
			case 'UpdateType':
				if (_p8._0.ctor === 'Ok') {
					return A2(_user$project$Update$updateUpdateType, model, _p8._0._0);
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				}
			case 'DeleteType':
				if (_p8._0.ctor === 'Ok') {
					return A2(_user$project$Update$updateDeleteType, model, _p8._0._0);
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				}
			case 'SetTypeName':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{typeName: _p8._0}),
					{ctor: '[]'});
			case 'ClickSaveType':
				return _user$project$Update$saveType(model);
			case 'ClickEditType':
				var _p9 = _p8._0;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							typeName: _p9.name,
							typeId: _elm_lang$core$Maybe$Just(_p9.id)
						}),
					{ctor: '[]'});
			case 'ClickDeleteType':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: _user$project$Commands$deleteType(_p8._0),
						_1: {ctor: '[]'}
					});
			case 'FetchBrand':
				if (_p8._0.ctor === 'Ok') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								brandList: _user$project$Model$Success(_p8._0._0)
							}),
						{ctor: '[]'});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								brandList: _user$project$Model$Failure('Something went wrong...')
							}),
						{ctor: '[]'});
				}
			case 'UrlChange':
				var currentRoute = _user$project$Routing$parse(_p8._0);
				return _user$project$Update$urlUpdate(
					_elm_lang$core$Native_Utils.update(
						model,
						{route: currentRoute}));
			default:
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: _elm_lang$navigation$Navigation$newUrl(
							_user$project$Routing$toPath(_p8._0)),
						_1: {ctor: '[]'}
					});
		}
	});
